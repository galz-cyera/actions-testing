/// <reference types="lerna-package" />
/// <reference types="lerna-package-graph" />
import { PackageGraphNode } from '@lerna/package-graph';
import { Package as LernaPackage } from '@lerna/package';
import { DockerStage } from './read-dockerfile';
export declare type PackageMap = Map<string, Package>;
export declare class Package {
    name: string;
    lernaPackage: LernaPackage;
    lernaPackageGraphNode: PackageGraphNode;
    dockerFile?: DockerStage[];
    constructor(name: string, lernaPackage: LernaPackage, lernaPackageGraphNode: PackageGraphNode);
    findDockerfile(): Promise<string | undefined>;
    loadDockerfile(defaultDockerFile?: DockerStage[]): Promise<DockerStage[]>;
    get relativePath(): string;
    get dockerWorkingDir(): string;
    getPackageStageNamePrefix(): string;
    getPrepareStageName(): string | undefined;
    getBuildStageName(): string | undefined;
    getBuildStage(): DockerStage | undefined;
    stageHasInstall(stage?: DockerStage): boolean;
    getFinalizedBuildStages(packageMap: PackageMap): Promise<string[]>;
    private scopeDockerStage;
}
